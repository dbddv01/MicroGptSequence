{
    "get_user_input": "def get_user_input(prompt_text):\n    print(f'\\nUser Input Required:\\n{prompt_text}')\n    return input('Enter your response: ')",
    "generate_response": "def generate_response(prompt_text):\n    payload = {\n        'model': 'gpt-3.5-turbo',\n        'messages': [{'role': 'user', 'content': prompt_text}],\n        'max_tokens': 500\n    }\n    response = requests.post(api_url, json=payload, headers=api_headers)\n    response.raise_for_status()\n    return response.json()['choices'][0]['message']['content']",
     "execute_python_code": "import traceback\n\ndef execute_python_code(python_code):\n    \"\"\"\n    Executes Python code provided as a string. The code can include functions, comments,\n    docstrings, and test cases. Returns the output or error message as a string.\n    \"\"\"\n    try:\n        # Preprocess the code: Remove Markdown code block delimiters\n        if python_code.startswith('```') and python_code.endswith('```'):\n            lines = python_code.splitlines()\n            # Remove the first and last lines (Markdown delimiters)\n            python_code = '\\n'.join(lines[1:-1])\n\n        # Prepare execution environment with necessary imports\n        exec_globals = {\n            \"requests\": __import__(\"requests\"),\n            \"BeautifulSoup\": __import__(\"bs4\").BeautifulSoup\n        }\n        exec_locals = {}\n\n        # Execute the code\n        exec(python_code, exec_globals, exec_locals)\n\n        # Capture output, if available\n        if '__builtins__' in exec_globals:\n            del exec_globals['__builtins__']  # Clean up for security\n\n        # Look for any `print` outputs or explicitly defined variables\n        output = {k: v for k, v in exec_locals.items() if not k.startswith('__')}\n\n        return f'Execution successful. Variables and outputs:\\n{output}'\n    except Exception as e:\n        return f'Error: {str(e)}\\n{traceback.format_exc()}'",
	"extract_python_code": "def extract_python_code(initial_string):\n    import re\n    # Use regex to find the content between ```python and ```\n    match = re.search(r\"```python(.*?)```\", initial_string, re.DOTALL)\n    if match:\n        # Strip any leading/trailing whitespace from the code\n        return match.group(1).strip()\n    else:\n        return \"\"  # Return an empty string if no match is found\n"
}