{
    "get_user_input": "def get_user_input(prompt_text):\n    print(f'\\nUser Input Required:\\n{prompt_text}')\n    return input('Enter your response: ')",
    "generate_response": "def generate_response(prompt_text):\n    payload = {\n        'model': 'gpt-3.5-turbo',\n        'messages': [{'role': 'user', 'content': prompt_text}],\n        'max_tokens': 500\n    }\n    response = requests.post(api_url, json=payload, headers=api_headers)\n    response.raise_for_status()\n    return response.json()['choices'][0]['message']['content']",
     "execute_python_code": "def execute_python_code(python_code):\n    import traceback\n    import importlib\n    import re\n\n    try:\n        # Preprocess code: Remove Markdown code block delimiters\n        if python_code.startswith('```') and python_code.endswith('```'):\n            lines = python_code.splitlines()\n            python_code = '\\n'.join(lines[1:-1])\n\n        # Set up the execution environment\n        exec_globals = {\"__builtins__\": __builtins__}  # Basic built-ins only\n        exec_locals = {}\n\n        # Detect required modules in the code\n        detected_modules = set(re.findall(r'^\\s*(?:import|from)\\s+(\\w+)', python_code, re.MULTILINE))\n\n        # Import detected modules dynamically\n        for module in detected_modules:\n            if module not in exec_globals:\n                try:\n                    exec_globals[module] = importlib.import_module(module)\n                except ImportError:\n                    return f\"Error: Module '{module}' could not be imported.\"\n\n        # Execute the Python code\n        exec(python_code, exec_globals, exec_locals)\n\n        # Collect execution results\n        output = {k: v for k, v in exec_locals.items() if not k.startswith('__')}\n        return f'Execution successful. Variables and outputs:\\n{output}'\n\n    except Exception as e:\n        return f'Error: {str(e)}\\n{traceback.format_exc()}'",
	"extract_python_code": "def extract_python_code(initial_string):\n    import re\n    # Use regex to find the content between ```python and ```\n    match = re.search(r\"```python(.*?)```\", initial_string, re.DOTALL)\n    if match:\n        # Strip any leading/trailing whitespace from the code\n        return match.group(1).strip()\n    else:\n        return \"\"  # Return an empty string if no match is found\n"
}